pipeline {
   agent any

   tools {
      maven 'apache-maven-3.9.6'
   }

   environment {
      DOCKER_IMAGE = "gauravanthara/apiframeworkdoc:${BUILD_NUMBER}"
      DOCKER_CREDENTIALS_ID = 'dockerhub_credentials'
   }

   stages {
      stage('Checkout Code') {
         steps {
            git 'https://github.com/Gaurav1995anthara/API_RestAssured_Framework.git'
         }
      }

      stage('Build Docker Image') {
         steps {
            script {
               if (isUnix()) {
                  sh "docker build -t ${DOCKER_IMAGE} ."
               } else {
                  bat "docker build -t ${DOCKER_IMAGE} ."
               }
            }
         }
      }

      stage('Push Docker Image to Docker Hub') {
         steps {
            withCredentials([usernamePassword(
               credentialsId: "${DOCKER_CREDENTIALS_ID}",
               usernameVariable: 'DOCKER_USER',
               passwordVariable: 'DOCKER_PASS'
            )]) {
               script {
                  if (isUnix()) {
                     sh '''
                        echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                        docker push ${DOCKER_IMAGE}
                     '''
                  } else {
                     bat '''
                        echo %DOCKER_PASS% | docker login -u %DOCKER_USER% --password-stdin
                        docker push %DOCKER_IMAGE%
                     '''
                  }
               }
            }
         }
      }

      stage('Run Tests in Multiple Environments') {
         matrix {
            axes {
               axis {
                  name 'ENV'
                  values 'Dev', 'QA', 'Stage', 'Prod'
               }
            }
            stages {
               stage('Deploy') {
                  steps {
                     echo "Deploying to ${ENV} environment..."
                  }
               }

               stage('Run Tests') {
                  steps {
                     script {
                        def testCommand = "mvn test -Dsurefire.suiteXmlFiles=src/test/resources/testRunners/testng_regression.xml"
                        if (isUnix()) {
                           sh "docker run --rm -v $WORKSPACE:/app -w /app ${DOCKER_IMAGE} ${testCommand}"
                        } else {
                           bat "docker run --rm -v %WORKSPACE%:/app -w /app ${DOCKER_IMAGE} ^ ${testCommand}"
                        }
                     }
                  }
               }

               stage('Publish ChainTest Report') {
                  steps {
                     publishHTML([
                        allowMissing: false,
                        alwaysLinkToLastBuild: false,
                        keepAll: true,
                        reportDir: 'target/chaintest',
                        reportFiles: 'Index.html',
                        reportName: "HTML API ${ENV} ChainTest Report",
                        reportTitles: ''
                     ])
                  }
               }
            }
         }
      }

      stage('Publish Allure Reports') {
         steps {
            allure([
               includeProperties: false,
               jdk: '',
               properties: [],
               reportBuildPolicy: 'ALWAYS',
               results: [[path: 'target/allure-results']]
            ])
         }
      }
   }
}